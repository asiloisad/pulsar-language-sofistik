# ***** References *****
# https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/
# http://manual.macromates.com/en/language_grammars/
# https://regex101.com/

# __________________ GENERAL _______________________________________________ #

scopeName: 'source.sofi'
name: 'SOFiSTiK'
fileTypes: ['dat','gra','.results','sto','dfs','blk']
patterns: [

# __________________ PROG OUTSIDE __________________________________________ #

  {include: '#normalText'}

  {
    match: '(?i) *([\\+-]?prog)'
    name: 'support.class'
  }

# __________________ AQUA __________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +aqua)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    # # ********* example how to desine parametrs for function ********* #
    # # but problem is how to get tables with short code...
    # {
    #   match: '(?i)(?<=\\W|^)(prof)( .+?(?=;|$)|)'
    #   captures:
    #     1: name: 'keyword.control'
    #     2: patterns: [
    #         {'include': '#normalText'}
    #         {
    #           match: '(?i)(?<!\\w)(no|type|z1|z2|z3|mno|alph|ym|zm|refp|redd|refs|dtyp|sym|ref|mati|vd|vb|vs|vt|vr1|vr2|vb2|vt2|bcyz)(?!\\w)'
    #           name: 'entity.name.function'
    #         }
    #       ]
    # }
    # ****************************************************************** #
    {
      match: '(?i)(^\\W*|\\;\\W*)(ctrl|norm|mate|mat|mlay|namt|bmat|hmat|conc|stee|timb|maso|ssla|mext|bore|blay|bbax|bbla|btab|smat|sfla|sval|srec|scit|cabl|sect|cs|sv|poly|vert|circ|cut|pane|plat|weld|prof|spt|neff|wpar|wind|lay|rf|lrf|crf|curf|tvar|inte|impo|expo|echo)( .+?(?=;|$)|)'
      captures:
        1: name: 'support.type'
        2: name: 'keyword.control'
        3: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalText'}

  ]
  }


# __________________ SOFIMSHC ______________________________________________ #

  {
  begin: '(?i)(?<=prog)( +sofimshc)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {
      match: '(?i)(?<=\\W|^)(syst|ctrl|grp|impo|expo|echo|coor|xsub|xcon|gax|gaxa|gaxh|gaxb|gaxc|gaxn|gaxp|gaxs|gaxv|gar|gara|garc|gars|spt|sptp|spts|spth|sln|slnb|slnp|slnn|slns|slnc|sar|sarb|sarr|sarp|sarc|sars|svo|svob|guid|bbox|slvl)( .+?(?=;|$)|)'
      captures:
        1: name: 'keyword.control'
        2: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalText'}
  ]
  }


# __________________ SOFILOAD ______________________________________________ #

  {
  begin: '(?i)(?<=prog)( +sofiload)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {
      match: '(?i)(?<=\\W|^)(grp|act|lc|node|cabl|trus|beam|bepl|quad|bric|copy|lar|poin|line|curv|area|volu|expo|eval|ctrl|coor|echo|resp|func|fimp|acce|step|simq|reva|push|gax|lane|trai|trpl|trbl|trex|wind|wpro|wrou|wtop|wspe|wtst|wgen|wipt|wave)( .+?(?=;|$)|)'
      captures:
        1: name: 'keyword.control'
        2: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalText'}
  ]
  }


# __________________ ASE ___________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +ase)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {
      match: '(?i)(?<=\\W|^)(ctrl|syst|step|hist|ulti|push|plot|crep|grp|grp2|elem|len0|high|tbea|reiq|stex|obli|slip|volu|movs|laun|sfix|actb|lc|temp|pext|lcc|eige|mass|v0|rein|desi|nstr|echo)( .+?(?=;|$)|)'
      captures:
        1: name: 'keyword.control'
        2: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalText'}
  ]
  }


# __________________ AQB ___________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +aqb)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {
      match: '(?i)(?<=\\W|^)(norm|ctrl|tvar|beam|tend|lc|s|comb|eige|stre|rein|desi|nstr|capa|echo)( .+?(?=;|$)|)'
      captures:
        1: name: 'keyword.control'
        2: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalText'}
  ]
  }


# __________________ TEMPLATE ______________________________________________ #

  {
  begin: '(?i)(?<=prog)( +template)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {
      match: '(?i)(?<=\\W|^)(page|echo)( .+?(?=;|$)|)'
      captures:
        1: name: 'keyword.control'
        2: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalText'}
  ]
  }


# __________________ CSM ___________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +csm)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {
      match: '(?i)(?<=\\W|^)(ctrl|laun|cs|grp|grcs|wait|lc|camb|cabl|crep|deps|act|desi|desb|suma|rein|box|qcut|scal|sele|expo|eqlc|equu|eqpp|eqbe|eqit|echo)( .+?(?=;|$)|)'
      captures:
        1: name: 'keyword.control'
        2: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalText'}
  ]
  }


# __________________ DYNA __________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +dyna)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {
      match: '(?i)(?<=\\W|^)(syst|ctrl|grp|mat|bmat|smat|mass|eige|modd|step|lc|cont|hist|extr|echo)( .+?(?=;|$)|)'
      captures:
        1: name: 'keyword.control'
        2: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalText'}
  ]
  }


# __________________ DYNR __________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +dynr)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {
      match: '(?i)(?<=\\W|^)(size|schh|resp|func|exci|spec|hist|echo)( .+?(?=;|$)|)'
      captures:
        1: name: 'keyword.control'
        2: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalText'}
  ]
  }


# __________________ MAXIMA ________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +maxima)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {
      match: '(?i)(?<=\\W|^)(ctrl|comb|act|add|ada|lc|supp|sum|expo|echo)( .+?(?=;|$)|)'
      captures:
        1: name: 'keyword.control'
        2: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalText'}
  ]
  }


# __________________ ELLA __________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +ella)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {
      match: '(?i)(?<=\\W|^)(echo|ctrl|gax|lane|lsel|calc|linf|appl|size|show|act|lc|trai|trpl|trbl|save|sace|posl|comb)( .+?(?=;|$)|)'
      captures:
        1: name: 'keyword.control'
        2: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalText'}
  ]
  }


# __________________ TALPA _________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +talpa)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {
      match: '(?i)(?<=\\W|^)(task|syst|ctrl|phrs|plc|tplc|grp|lc|lcc|hist|nstr|csys|ccrl|cs|cgrp|cloa|cgw|ctxt|echo)( .+?(?=;|$)|)'
      captures:
        1: name: 'keyword.control'
        2: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalText'}
  ]
  }


# __________________ BEMESS ________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +bemess)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {
      match: '(?i)(?<=\\W|^)(norm|ctrl|crac|mrei|shft|nstr|mat|geom|dire|thre|di3d|lay|para|punc|lc|grp|elem|node|sele|s|expo|echo)( .+?(?=;|$)|)'
      captures:
        1: name: 'keyword.control'
        2: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalText'}
  ]
  }
]

# __________________ REPOSITORY ____________________________________________ #

repository:
  normalText: {
    patterns: [
      {include: '#def3'}
      {include: '#defblo'}
      {include: '#def1'}
      {include: '#def2'}
      {include: '#inc1'}
      {include: '#com1'}
      {include: '#com2'}
      {include: '#linsep'}
      {include: '#str1'}
      {include: '#str2'}
      {include: '#spec1'}
      {include: '#spec2'}
      {include: '#var1'}
      {include: '#var2'}
      {include: '#expr'}
      {include: '#inLoop'}
    ]
  }

  def1: {
    match: '(?i)^[ ]*(#include|[\\+-]?apply)( +.+)'
    captures:
      1: name: 'entity.name.section'
      2: name: 'string'
  }
  def2: {
    match: '(?i)(?<=\\W|^)(end)( .+?(?=;|$)|)'
    captures:
      1: name: 'keyword.control'
  }
  def3: {
    match: '(?i)^[ ]*(#define)( +\\w* *)='
    captures:
      1: name: 'entity.name.section'
      2: name: 'string'
  }
  inc1: {
    match: '\\$\\(.+\\)'
    name: 'variable.other'
  }
  str1: { # strings
    match: '\".*\"'
    name: 'string'
  }
  str2: { # strings
    match: '\'.*\''
    name: 'string'
  }
  linsep: { # line sep
    match: ';'
    name: 'support.type'
  }
  spec1: { # special
    match: '(?i)(?:^|;)[ ]*(head) .*'
    captures:
      1: name: 'keyword.control'
  }
  spec2: { # special
    match: '(?i)(?:^|;)[ ]*(endloop|end)(?!\\w)'
    captures:
      1: name: 'keyword.control'
  }
  var1: {
    match: '(?<!\\w)(?:let|sto|del|dbg|loop)(?=#\\w+)'
    name: 'keyword.control'
  }
  var2: {
    match: '#\\w+'
    name: 'variable.other'
  }
  com1: {
    match: '[!|\/\/].*'
    name: 'comment.line'
  }
  com2: {
    match: '\\$[^\(].*'
    name: 'comment.line'
  }
  defblo: {
    begin: '(?i)^[ ]*(#define)($| .*)'
    beginCaptures:
      1: name: 'variable.other'
      2: name: 'string'
    end: '(?i)(?:^|;)[ ]*(#enddef)(?!\\w)'
    endCaptures:
      1: name: 'variable.other'
  }
  expr: {
    match: '(=\\S+)'
    captures:
      1:
        name: 'entity.name.function'
        patterns: [{'include': '#var2'}]
  }
  inLoop: {
    match: '\\([^ ]+? [^ ]+?(?: [^ ]+?)?\\)'
    name: 'entity.name.function'
  }
