# ***** References *****
# https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/
# http://manual.macromates.com/en/language_grammars/
# https://regex101.com/

# __________________ GENERAL _______________________________________________ #

scopeName: 'source.sofi'
name: 'SOFiSTiK'
fileTypes: ['dat','gra','results','sto','dfs','blk']
patterns: [

# __________________ PROG OUTSIDE __________________________________________ #

  {include: '#normalText'}
  {include: '#text'}

  {
    match: '(?i) *([\\+-]?prog)'
    name: 'support.class'
  }

# __________________ AQUA __________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +aqua)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    # # ********* example how to desine parametrs for function ********* #
    # # but problem is how to get tables with short code...
    {include: '#normalText'}
    {
      match: '(?i)(^\\W*|\\;\\W*)(prof)( .+?(?=;|$)| *$)'
      captures:
        1: name: 'support.type'
        2: name: 'keyword.control'
        3: patterns: [
          {'include': '#normalText'}
          {
            match: '(?i)(?<!\\w)(no|type|z1|z2|z3|mno|alph|ym|zm|refp|redd|refs|dtyp|sym|ref|mati|vd|vb|vs|vt|vr1|vr2|vb2|vt2|bcyz)(?!\\w)'
            name: 'entity.name.function'
          }
        ]
    }
    # ****************************************************************** #
    {
      match: '(?i)(^\\W*|\\;\\W*)(ctrl|norm|mate|mat|mlay|namt|bmat|hmat|conc|stee|timb|maso|ssla|mext|bore|blay|bbax|bbla|btab|smat|sfla|sval|srec|scit|cabl|sect|cs|sv|poly|vert|circ|cut|pane|plat|weld|prof|spt|neff|wpar|wind|lay|rf|lrf|crf|curf|tvar|inte|impo|expo|echo)( .+?(?=;|$)| *$)'
      captures:
        1: name: 'support.type'
        2: name: 'keyword.control'
        3: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalTextIn'}
  ]
  }

# __________________ SOFIMSHA ______________________________________________ #

  {
  begin: '(?i)(?<=prog)( +sofimsha)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {include: '#normalText'}
    {
      match: '(?i)(^\\W*|\\;\\W*)(syst|ctrl|grp|node|edge|kine|getn|trus|cabl|beam|bsec|quad|bric|spri|boun|addm|flex|mass|sbox|del|mod|tran|extr|loft|mirr|umsh|intf|rset|expo|impo|echo)( .+?(?=;|$)| *$)'
      captures:
        1: name: 'support.type'
        2: name: 'keyword.control'
        3: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalTextIn'}
  ]
  }

# __________________ SOFIMSHC ______________________________________________ #

  {
  begin: '(?i)(?<=prog)( +sofimshc)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {include: '#normalText'}
    {
      match: '(?i)(^\\W*|\\;\\W*)(syst|ctrl|grp|impo|expo|echo|coor|xsub|xcon|gax|gaxa|gaxh|gaxb|gaxc|gaxn|gaxp|gaxs|gaxv|gar|gara|garc|gars|spt|sptp|spts|spth|sln|slnb|slnp|slnn|slns|slnc|sar|sarb|sarr|sarp|sarc|sars|svo|svob|guid|bbox|slvl)( .+?(?=;|$)| *$)'
      captures:
        1: name: 'support.type'
        2: name: 'keyword.control'
        3: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalTextIn'}
  ]
  }


# __________________ SOFILOAD ______________________________________________ #

  {
  begin: '(?i)(?<=prog)( +sofiload)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {include: '#normalText'}
    {
      match: '(?i)(^\\W*|\\;\\W*)(grp|act|lc|node|cabl|trus|beam|bepl|quad|bric|copy|lar|poin|line|curv|area|volu|expo|eval|ctrl|coor|echo|resp|func|fimp|acce|step|simq|reva|push|gax|lane|trai|trpl|trbl|trex|wind|wpro|wrou|wtop|wspe|wtst|wgen|wipt|wave)( .+?(?=;|$)| *$)'
      captures:
        1: name: 'support.type'
        2: name: 'keyword.control'
        3: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalTextIn'}
  ]
  }


# __________________ ASE ___________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +ase)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {include: '#normalText'}
    {
      match: '(?i)(^\\W*|\\;\\W*)(ctrl|syst|step|hist|ulti|push|plot|crep|grp|grp2|elem|len0|high|tbea|reiq|stex|obli|slip|volu|movs|laun|sfix|actb|lc|temp|pext|lcc|eige|mass|v0|rein|desi|nstr|echo)( .+?(?=;|$)| *$)'
      captures:
        1: name: 'support.type'
        2: name: 'keyword.control'
        3: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalTextIn'}
  ]
  }


# __________________ AQB ___________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +aqb)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {include: '#normalText'}
    {
      match: '(?i)(^\\W*|\\;\\W*)(norm|ctrl|tvar|beam|tend|lc|s|comb|eige|stre|rein|desi|nstr|capa|echo)( .+?(?=;|$)| *$)'
      captures:
        1: name: 'support.type'
        2: name: 'keyword.control'
        3: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalTextIn'}
  ]
  }


# __________________ TEMPLATE ______________________________________________ #

  {
  begin: '(?i)(?<=prog)( +template)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {include: '#normalText'}
    {
      match: '(?i)(^\\W*|\\;\\W*)(page|echo)( .+?(?=;|$)| *$)'
      captures:
        1: name: 'support.type'
        2: name: 'keyword.control'
        3: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalTextIn'}
  ]
  }


# __________________ CSM ___________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +csm)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {include: '#normalText'}
    {
      match: '(?i)(^\\W*|\\;\\W*)(ctrl|laun|cs|grp|grcs|wait|lc|camb|cabl|crep|deps|act|desi|desb|suma|rein|box|qcut|scal|sele|expo|eqlc|equu|eqpp|eqbe|eqit|echo)( .+?(?=;|$)| *$)'
      captures:
        1: name: 'support.type'
        2: name: 'keyword.control'
        3: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalTextIn'}
  ]
  }


# __________________ DYNA __________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +dyna)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {include: '#normalText'}
    {
      match: '(?i)(^\\W*|\\;\\W*)(syst|ctrl|grp|mat|bmat|smat|mass|eige|modd|step|lc|cont|hist|extr|echo)( .+?(?=;|$)| *$)'
      captures:
        1: name: 'support.type'
        2: name: 'keyword.control'
        3: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalTextIn'}
  ]
  }


# __________________ DYNR __________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +dynr)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {include: '#normalText'}
    {
      match: '(?i)(^\\W*|\\;\\W*)(size|schh|resp|func|exci|spec|hist|echo)( .+?(?=;|$)| *$)'
      captures:
        1: name: 'support.type'
        2: name: 'keyword.control'
        3: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalTextIn'}
  ]
  }


# __________________ MAXIMA ________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +maxima)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {include: '#normalText'}
    {
      match: '(?i)(^\\W*|\\;\\W*)(ctrl|comb|act|add|ada|lc|supp|sum|expo|echo)( .+?(?=;|$)| *$)'
      captures:
        1: name: 'support.type'
        2: name: 'keyword.control'
        3: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalTextIn'}
  ]
  }


# __________________ ELLA __________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +ella)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {include: '#normalText'}
    {
      match: '(?i)(^\\W*|\\;\\W*)(echo|ctrl|gax|lane|lsel|calc|linf|appl|size|show|act|lc|trai|trpl|trbl|save|sace|posl|comb)( .+?(?=;|$)| *$)'
      captures:
        1: name: 'support.type'
        2: name: 'keyword.control'
        3: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalTextIn'}
  ]
  }


# __________________ TALPA _________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +talpa)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {include: '#normalText'}
    {
      match: '(?i)(^\\W*|\\;\\W*)(task|syst|ctrl|phrs|plc|tplc|grp|lc|lcc|hist|nstr|csys|ccrl|cs|cgrp|cloa|cgw|ctxt|echo)( .+?(?=;|$)| *$)'
      captures:
        1: name: 'support.type'
        2: name: 'keyword.control'
        3: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalTextIn'}
  ]
  }


# __________________ BEMESS ________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +bemess)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {include: '#normalText'}
    {
      match: '(?i)(^\\W*|\\;\\W*)(norm|ctrl|crac|mrei|shft|nstr|mat|geom|dire|thre|di3d|lay|para|punc|lc|grp|elem|node|sele|s|expo|echo)( .+?(?=;|$)| *$)'
      captures:
        1: name: 'support.type'
        2: name: 'keyword.control'
        3: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalTextIn'}
  ]
  }


# __________________ RESULTS _______________________________________________ #

  {
  begin: '(?i)(?<=prog)( +results)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {include: '#normalText'}
    {
      match: '(?i)(^\\W*|\\;\\W*)(cdb|size|pict|and|ff|grp|lc|dbo|diag|dgra|diax|dlin|diap|dlab|filt|join|xlsx|pfa|pln|pmr|txtp|view|stru|cros|node|beam|quad|bric|rset)( .+?(?=;|$)| *$)'
      captures:
        1: name: 'support.type'
        2: name: 'keyword.control'
        3: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalTextIn'}
  ]
  }


# __________________ WING __________________________________________________ #

  {
  begin: '(?i)(?<=prog)( +wing)( .*)?'
  beginCaptures:
    1: name: 'support.class'
    2: name: 'comment.line'
  end: '(?i) *([\\+-]?prog)'
  endCaptures:
    1: name: 'support.class'
  patterns: [
    {include: '#normalText'}
    {
      match: '(?i)(^\\W*|\\;\\W*)(ctrl|db|size|siz2|and|schh|sch2|sch3|grid|lego|pale|colo|col2|colb|fill|sele|grp|box|sel|view|pers|visi|defo|move|draw|text|post|nive|curv|axis|dsir|cutp|lc|dsgn|arro|list|stru|load|node|beam|quad|isol|sect|bric|inte)( .+?(?=;|$)| *$)'
      captures:
        1: name: 'support.type'
        2: name: 'keyword.control'
        3: patterns: [{'include': '#normalText'}]
    }
    {include: '#normalTextIn'}
  ]
  }


# __________________________________________________________________________ #

]

# __________________ REPOSITORY ____________________________________________ #

repository:

# __________________________________________________________________________ #

  normalText: {
    patterns: [
      {include: '#defA'}
      {include: '#defB'}
      {include: '#defC'}
      {include: '#inc1'}
      {include: '#com1'}
      {include: '#com2'}
      {include: '#str1'}
      {include: '#str2'}
      {include: '#linsep'}
      {include: '#var2'}
      {include: '#var3'}
      {include: '#expr'}
      # {include: '#inLoop'}
    ]
  }
  normalTextIn: {
    patterns: [
      {include: '#var1'}
      {include: '#spec1'}
      {include: '#spec2'}
      {include: '#keyECHO'}
      {include: '#keyUNIT'}
      {include: '#keyPAGE'}
      {include: '#keySIZE'}
      {include: '#keyGNT'}
      {include: '#keyGXX'}
      {include: '#keyGGDP'}
      {include: '#keyGTXT'}
      {include: '#keyGSCA'}
      {include: '#keyGCOL'}
      {include: '#keyGPLI'}
      {include: '#keyGPMI'}
      {include: '#keyGTXI'}
      {include: '#keyGFAI'}
      {include: '#text'}
    ]
  }

# __________________________________________________________________________ #

  text: {
    begin: '(?i)^[ ]*(<text>)(?= |$)'
    beginCaptures:
      1: name: 'keyword.control'
    end: '(?i)^[ ]*(<\\/text>)(?= |$)'
    endCaptures:
      1: name: 'keyword.control'
    contentName: 'string'
    patterns: [
        {include: '#var2'}
        {include: '#inc1'}
    ]
  }
  defA: {
    match: '(?i)^[ ]*(#define)( +\\w* *)='
    captures:
      1: name: 'entity.name.section'
      2: name: 'string'
  }
  defB: {
    begin: '(?i)^[ ]*(#define)($| .*)'
    beginCaptures:
      1: name: 'variable.other'
      2: name: 'string'
    end: '(?i)(?:^|;)[ ]*(#enddef)(?!\\w)'
    endCaptures:
      1: name: 'variable.other'
  }
  defC: {
    match: '(?i)^[ ]*(#include|[\\+-]?apply)( +.+)'
    captures:
      1: name: 'entity.name.section'
      2: name: 'string'
  }
  inc1: {
    match: '\\$\\(.+\\)'
    name: 'variable.other'
  }
  com1: {
    match: '(?:!|//).*'
    name: 'comment.line'
  }
  com2: {
    match: '\\$[^\(].*'
    name: 'comment.line'
  }
  str1: { # strings
    match: '\\".*?\\"'
    name: 'string'
  }
  str2: { # strings
    match: "\\'.*?\\'"
    name: 'string'
  }
  linsep: { # line sep
    match: ';'
    name: 'support.type'
  }
  var2: {
    match: '#\\w+'
    name: 'variable.other'
  }
  expr: {
    match: '(?<=\\s|^)(=\\S+)'
    captures:
      1:
        name: 'entity.name.function'
        patterns: [{'include': '#var2'}]
  }
  inLoop: { # what is it? :D
    match: '\\([^ ]+? [^ ]+?(?: [^ ]+?)?\\)'
    name: 'entity.name.function'
  }

# __________________________________________________________________________ #

  var1: {
    match: '(?i)(?<!\\w)(?:let|sto|del|dbg)(?=#\\w+)'
    name: 'keyword.control'
  }
  var3: {
    match: '(?i)(?<!\\w)(?:loop|if|elseif|else|endif)(?!\\w)'
    name: 'keyword.control'
  }
  spec1: {
    match: '(?i)(^\\W*|\\;\\W*)(head|txb|txe)( .+?$| *$)'
    captures:
      1: name: 'support.type'
      2: name: 'keyword.control'
  }
  spec2: {
    match: '(?i)(?:^|;)[ ]*(endloop|end)(?!\\w)'
    captures:
      1: name: 'keyword.control'
  }
  keyECHO: {
    match: '(?i)(^\\W*|\\;\\W*)(echo)( .+?(?=;|$)| *$)'
    captures:
      1: name: 'support.type'
      2: name: 'keyword.control'
      3: patterns: [
        {'include': '#normalText'}
        {
          match: '(?i)(?<!\\w)(opt|val)(?!\\w)'
          name: 'entity.name.function'
        }
      ]
  }
  keyUNIT: {
    match: '(?i)(^\\W*|\\;\\W*)(unit)( .+?(?=;|$)| *$)'
    captures:
      1: name: 'support.type'
      2: name: 'keyword.control'
      3: patterns: [
        {'include': '#normalText'}
        {
          match: '(?i)(?<!\\w)(type|use|dig|set)(?!\\w)'
          name: 'entity.name.function'
        }
      ]
  }
  keyPAGE: {
    match: '(?i)(^\\W*|\\;\\W*)(page)( .+?(?=;|$)| *$)'
    captures:
      1: name: 'support.type'
      2: name: 'keyword.control'
      3: patterns: [
        {'include': '#normalText'}
        {
          match: '(?i)(?<!\\w)(firs|line|marg|lano|lani|unio|unii|form|pril|pag)(?!\\w)'
          name: 'entity.name.function'
        }
      ]
  }
  keySIZE: {
    match: '(?i)(^\\W*|\\;\\W*)(size)( .+?(?=;|$)| *$)'
    captures:
      1: name: 'support.type'
      2: name: 'keyword.control'
      3: patterns: [
        {'include': '#normalText'}
        {
          match: '(?i)(?<!\\w)(type|sc|w|h|marg|form)(?!\\w)'
          name: 'entity.name.function'
        }
      ]
  }
  keyGNT: {
    match: '(?i)(^\\W*|\\;\\W*)(gnt)( .+?(?=;|$)| *$)'
    captures:
      1: name: 'support.type'
      2: name: 'keyword.control'
      3: patterns: [
        {'include': '#normalText'}
        {
          match: '(?i)(?<!\\w)(no|sc|xmin|ymin|xmax|ymax|wxmi|wymi|wxma|wyma)(?!\\w)'
          name: 'entity.name.function'
        }
      ]
  }
  keyGXX: {
    match: '(?i)(^\\W*|\\;\\W*)(gnt|gpm|gfa)( .+?(?=;|$)| *$)'
    captures:
      1: name: 'support.type'
      2: name: 'keyword.control'
      3: patterns: [
        {'include': '#normalText'}
        {
          match: '(?i)(?<!\\w)(x1|y1|x1|x2|y2|x2|x3|y3|x3|x4|y4|x4|x5|y5|x5|x6|y6|x6|x7|y7|x7|x8|y8|x8|x9|y9|x9|x10|y10|x10|x11|y11|x11|x12|y12|x12|x13|y13|x13|x14|y14|x14|x15|y15|x15|x16|y16|x16)(?!\\w)'
          name: 'entity.name.function'
        }
      ]
  }
  keyGGDP: {
    match: '(?i)(^\\W*|\\;\\W*)(ggdp)( .+?(?=;|$)| *$)'
    captures:
      1: name: 'support.type'
      2: name: 'keyword.control'
      3: patterns: [
        {'include': '#normalText'}
        {
          match: '(?i)(?<!\\w)(type|x1|y1|x1|x2|y2|x2|x3|y3|x3|x4|y4|x4|x5|y5|x5|x6|y6|x6|x7|y7|x7|x8|y8|x8|x9|y9|x9|x10|y10|x10|x11|y11|x11|x12|y12|x12|x13|y13|x13|x14|y14|x14|x15|y15|x15)(?!\\w)'
          name: 'entity.name.function'
        }
      ]
  }
  keyGTXT: {
    match: '(?i)(^\\W*|\\;\\W*)(gtxt)( .+?(?=;|$)| *$)'
    captures:
      1: name: 'support.type'
      2: name: 'keyword.control'
      3: patterns: [
        {'include': '#normalText'}
        {
          match: '(?i)(?<!\\w)(x|y|text|val|dim|nd)(?!\\w)'
          name: 'entity.name.function'
        }
      ]
  }
  keyGSCA: {
    match: '(?i)(^\\W*|\\;\\W*)(gsca)( .+?(?=;|$)| *$)'
    captures:
      1: name: 'support.type'
      2: name: 'keyword.control'
      3: patterns: [
        {'include': '#normalText'}
        {
          match: '(?i)(?<!\\w)(x1|y1|x2|y2|text|val|dim|nd)(?!\\w)'
          name: 'entity.name.function'
        }
      ]
  }
  keyGCOL: {
    match: '(?i)(^\\W*|\\;\\W*)(gcol)( .+?(?=;|$)| *$)'
    captures:
      1: name: 'support.type'
      2: name: 'keyword.control'
      3: patterns: [
        {'include': '#normalText'}
        {
          match: '(?i)(?<!\\w)(col|r|g|b)(?!\\w)'
          name: 'entity.name.function'
        }
      ]
  }
  keyGPLI: {
    match: '(?i)(^\\W*|\\;\\W*)(gpli)( .+?(?=;|$)| *$)'
    captures:
      1: name: 'support.type'
      2: name: 'keyword.control'
      3: patterns: [
        {'include': '#normalText'}
        {
          match: '(?i)(?<!\\w)(ind|col|type|widt|scat)(?!\\w)'
          name: 'entity.name.function'
        }
      ]
  }
  keyGPMI: {
    match: '(?i)(^\\W*|\\;\\W*)(gpmi)( .+?(?=;|$)| *$)'
    captures:
      1: name: 'support.type'
      2: name: 'keyword.control'
      3: patterns: [
        {'include': '#normalText'}
        {
          match: '(?i)(?<!\\w)(ind|col|type|size)(?!\\w)'
          name: 'entity.name.function'
        }
      ]
  }
  keyGTXI: {
    match: '(?i)(^\\W*|\\;\\W*)(gtxi)( .+?(?=;|$)| *$)'
    captures:
      1: name: 'support.type'
      2: name: 'keyword.control'
      3: patterns: [
        {'include': '#normalText'}
        {
          match: '(?i)(?<!\\w)(ind|col|h|bx|by|hali|vali|path|expa|spac|font)(?!\\w)'
          name: 'entity.name.function'
        }
      ]
  }
  keyGFAI: {
    match: '(?i)(^\\W*|\\;\\W*)(gfai)( .+?(?=;|$)| *$)'
    captures:
      1: name: 'support.type'
      2: name: 'keyword.control'
      3: patterns: [
        {'include': '#normalText'}
        {
          match: '(?i)(?<!\\w)(ind|col|styl|type)(?!\\w)'
          name: 'entity.name.function'
        }
      ]
  }
